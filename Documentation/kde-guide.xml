<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header$ -->

<guide link="proj/en/desktop/kde/kde4.xml" lang="en">
<title>Gentoo KDE 4.1 Guide</title>

<author title="Author">
	<mail link="tomas.chvatal@gmail.com">Tomáš Chvátal</mail>
</author>
<author title="Author">
	<mail link="jmbsvicetto"/>
</author>

<abstract>
This guide shows how to setup KDE-4.1 using the KDE team's git overlay (kde-testing).
It will be updated later when the ebuilds are put in the tree.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>0.1</version>
<date>2008-09-19</date>

<chapter>
	<title>Cleaning up</title>
	<section>
		<title>Removing old KDE versions</title>
		<body>
			<p>To prevent issues, we need to start with a clean enviroment so you'll need to uninstall any beta or 4.0.X release (uninstall is needed if you are moving from any other overlay and in particular if you plan to use the -kdeprefix use flag - FHS install). This can be done in many different ways. Here is one solution pointed out by alexxy:</p>
			<pre caption="Unmerging commands">
# <i>emerge -C @kde-4.1 @kdebase-4.1</i> <comment>(only if you are comming from the kdesvn-portage overlay)</comment>
# <i>emerge -C $(qfile -C -q -e /usr/kde/%PREFIX%)</i> <comment>(replace %PREFIX% with your kde version, eg. 4)</comment>
			</pre>
			<pre caption="Unmerging commands (only applicable if you are moving from other overlay)">
# <i>cd /path/to/old/overlay/</i>
# <i>emerge -C $(find ./ -name \*.ebuild |sed -e "s:.ebuild::" -e "s:./::" |awk -F'/' '{print "="$1"/"$3}')</i>
			</pre>
			<p>And as final step you should remove the old overlay so there is no blockage with our ebuilds. You should remove the old unmask and or keyword data for old kde4</p>
		</body>
	</section>
</chapter>

<chapter>
	<title>Grabbing overlay</title>
	<section>
		<title>Using layman</title>
		<body>
			<pre caption="layman command">
# <i>layman -fS; layman -a kde-testing</i></pre>
		</body>
	</section>
	<section>
		<title>Using git command</title>
		<body>
			<pre caption="git command">
# <i>git clone git://git.overlays.gentoo.org/proj/kde.git /PATH/WHERE/TO/PUT/OVERLAY</i></pre>
		</body>
	</section>
	<body>
		<note>Don't forget to modify /etc/make.conf to add the overlay path to PORTDIR_OVERLAY or to add the support for layman, if required.</note>
	</body>
</chapter>

<chapter>
	<title>Unmasking/Keywording</title>
	<p>The KDE-4.1 ebuilds available on the kde-testing overlay are not masked (the masks in package.mask have been updated accordingly) so there's no need to unmask them. If you're running the stable tree, you'll need to keyword the ebuilds. If you're running the testing tree, skip this. For those running the stable tree in Gentoo do the following:</p>
	<section>
		<title>Using the bundled package.keywords/kde file</title>
		<body>
			<note>This is the recomended way of keywording the packages.</note>
			<p>This overlay provides an appropriate package.keywords file that can be used on your package.keywords file/directory. You can find this file in "Documentation/package.keywords" directory. Just copy it to the correct location "/etc/portage/package.keywords/" (or if you're lazy make a symlink to it) or add it to your "/etc/portage/package.keywords" file.</p>
			<pre caption="Adding the file to the package.keywords dir">
# <i>cd /etc/portage/package.keywords</i>
# <i>ln -s /path/to/overlay/Documentation/package.keywords/kde .</i>
			</pre>
			<pre caption="Adding the file to the package.keywords file">
# <i>cd /etc/portage/</i>
# <i>cat /path/to/overlay/Documentation/package.keywords/kde >> package.keywords </i>
			</pre>
		</body>
	</section>
	<section>
		<title>Creating the file from the packages in the overlay</title>
		<body>
			<pre caption="Adding keywords to the package.keywords dir">
# <i>cd /path/to/our/overlay/</i>
# <i>find ./ -name \*.ebuild |sed -e "s:.ebuild::" -e "s:./::" |awk -F'/' '{print $1"/"$2}'  >> /etc/portage/package.keywords/kde4x</i>
# <i>cd /usr/portage/</i>
# <i>find ./x11-libs/qt-* -type d |sed -e "s:./::" |awk -F'/' '{print $1"/"$2}' | uniq >> /etc/portage/package.keywords/kde4x</i>
			</pre>
			<pre caption="Adding keywords to the package.keywords file">
# <i>cd /path/to/our/overlay/</i>
# <i>find ./ -name \*.ebuild |sed -e "s:.ebuild::" -e "s:./::" |awk -F'/' '{print $1"/"$2}' >> /etc/portage/package.keywords</i>
# <i>cd /usr/portage/</i>
# <i>find ./x11-libs/qt-* -type d |sed -e "s:./::" |awk -F'/' '{print $1"/"$2}' | uniq >> /etc/portage/package.keywords</i>
			</pre>
		</body>
	</section>
	<body>
		<note>Don't forget there are still some dependencies that need keywording, but are not in this list. So keyword them by yoursef.</note>
	</body>
</chapter>

<chapter>
	<title>Installation</title>
	<section>
		<title>The new kdeprefix use flag</title>
		<body>
			<p>The newly introduced kdeprefix use flag will allow users to have a FHS compliant install.</p>
			<p>If kdeprefix is disabled (default) KDE is installed into a FHS compliant location (/usr). That means all files are put under /usr/ and we don't have to mantain it separately in /usr/kde/VERSION/. This is the desired behavior for most users. The drawback of the FHS compliant install is that it will not be possible to have more than one version of KDE installed side by side as before.</p>
			<note>The described restriction doesn't apply to kde-3.5 (different eclasses) or live versions (as we'll keep having them under /usr/kde/${live-slot}. So you can have a non kdeprefix version of 4.1 and 3.5 working at the same time.</note>
			<p>If kdeprefix is enabled KDE is installed as usually into /usr/kde/${SLOT} which will allow users to keep having multiple versions of KDE installed side by side as before.</p>
			<note>"Error during set creation: Redefinition of set 'live-rebuild' (sections: 'live-rebuild', 'kde4-overlay sets')" is pretty harmless so dont bother about it :]</note>
			<warn>If you want to move between kdeprefix and -kdeprefix, unmerge KDE first. Then emerge it with enabled flag. Otherwise you might break everything!</warn>
		</body>
	</section>
	<section>
		<title>Using sets</title>
		<body>
			<p>One of the new features that portage-2.2 provides is the use of sets.</p>
			<p>Sets are a long awaited feature for KDE. They allow the KDE team to finally provide a complete replacement for the monolithic packages, with the added bonus that users can override the default sets to remove the packages they're not interested in. Look under the sets/ dir for a list of the sets provided by the KDE team.</p>
			<p>Amongst others, you have sets for each kde tarball - @kdeaccessibility, @kdeadmin, @kdeartwork, @kdebase, @kdeedu, @kdegames, @kdegraphics, @kdemultimedia, @kdenetwork, @kdepim, @kdesdk, @kdetoys and @kdeutils. There's also a set of sets (the equivalent to the old kde-meta package) @kde, and the same for specific versions @kde-3.5 and @kde-4x, a set for KDE deps @kdedeps, a set for optional packages @kdeoptional and a set for the split qt packages @qt-split.</p>
			<p>One can install the complete kde by doing <i>emerge -av @kde</i>. The specific version equivalents are very useful to uninstall an old version like <i>emerge -C @kde-3.5</i> or to reinstall all packages from a specific version <i>emerge -av1 @kde-4x</i>. If you want to override a set and remove any unwanted packages from it, copy the desired set to /etc/portage/sets and edit the file to remove the unwanted applications.</p>
			<p>We strongly recommend to install the @kdebase set and any other set or package one is interested in.</p>
			<pre caption="emerge KDE">
# <i>emerge @&lt;kde-set1&gt; @&lt;kde-set2&gt; @&lt;kde-set3&gt; ... @&lt;kde-setN&gt;</i>
			</pre>
			<note>If you want to check the list of sets known to Portage run the following: <i>emerge --list-sets</i></note>
			<note>If you experience some errors while trying to emerge @kde-4x and you use portage-2.2_rc8, then you need to patch portage with: <a href="http://dev.gentoo.org/~zmedico/tmp/sets_in_sets.patch">http://dev.gentoo.org/~zmedico/tmp/sets_in_sets.patch</a>.</note>
		</body>
	</section>
	<section>
		<title>Using meta packages</title>
		<body>
			<note>This metod will be removed in later releases and is provided for backward compatibility with older portage versions. There will no meta ebuilds for kde-4.2</note>
			<pre caption="emerge command">
# <i>emerge kde-meta:4</i></pre>
		</body>
	</section>
</chapter>
<chapter>
	<title>Configuration</title>
	<body>
		<p>Well we all know that our config files are kept for us in our HOME directory. But where that is the key. For KDE 3.X it is in ~/.kde and for KDE 4.X it is in ~/.kde4/ if you have it anywhere else from your other overlay please rename the directory for correct one if you want to use your old config.</p>
		<warn>Am I correct here? I am not sure...</warn>
	</body>
</chapter>
<chapter>
	<title>Migration from KDE 3.X</title>
	<section>
		<title>Configuration transition</title>
		<body>
			<p>TODO</p>
		</body>
	</section>
	<section>
		<title>Removing kde-3.5</title>
			<pre caption="Unmerging kde-3.5">
# <i>emerge -C @kde-3.5</i>
			</pre>
	</section>
	<section>
		<title>No Desktop icon</title>
		<body>
			<p>KDE 4, as it moves towards a semantic desktop, did not bundle any icon for the desktop at all. As you can see there is actually no desktop.</p>
			<p>Solution on howto fix this problem is to replace the desktop icon by folder one.</p>
			<pre caption="sed command">
$ <i>sed -i -e "s:Icon=desktop:Icon=folder:g" ~/Desktop/.directory</i></pre>
		</body>
	</section>
</chapter>
<chapter>
	<title>Hints</title>
	<section>
		<title>kde-misc/plasmoids</title>
		<body>
			<p>This ebuild contains various plasma applets which user suggested to add (if you find some contact us that we should add it, please be sure it is not svn version and is working with kde-4.1).</p>
		</body>
	</section>
	<section>
		<title>x11-themes/plasma-themes</title>
		<body>
			<p>This ebuild contains various plasma themes. Suggestions for adding are same as for plasmoids.</p>
		</body>
	</section>
	<section>
		<title>x11-themes/gtk-engines-qt</title>
		<body>
			<p>This ebuild should be used if you want your gtk applications use same apperance as your Qt/KDE applications. Configuration can be found in systemsetings->Apperance->GTK Styles and Fonts.</p>
		</body>
	</section>
	<section>
		<title>x11-themes/gtk-engines-qtcurve</title>
		<body>
			<p>Another approach making gtk/qt3/qt4 applications looks the same. User is needed to compile additional package with theme itself which is named x11-themes/qtcurve-qt4.</p>
		</body>
	</section>
</chapter>
<chapter>
	<title>Uninstalling KDE-4x</title>
	<section>
		<title>Removing all kde-dependant packages</title>
		<body>
			<p>First we need to get rid of ALL kde4 packages (if you leave them around it wont change anything, they wont work and leave you only headache finding out why).</p>
			<pre caption="Unmerging commands">
# <i>emerge -C @kde-4x</i>
# <i>cd /path/to/our/overlay/</i>
# <i>emerge -C $(find ./ -name \*.ebuild |sed -e "s:.ebuild::" -e "s:./::" |awk -F'/' '{print "="$1"/"$3}')</i></pre>
		</body>
	</section>
	<section>
		<title>Rebuilding App database</title>
		<body>
			<p>Since we run kde3 we need to rebuild sycoca DB for it.</p>
			<pre caption="kbuildsycoca command">
# kbuildsycoca</pre>
		</body>
	</section>
</chapter>
</guide>
